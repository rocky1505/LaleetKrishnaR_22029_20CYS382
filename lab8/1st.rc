#[derive(Clone, Debug)]
struct Book {
    title: String,
    author: String,
    isbn: String,
    is_issued: bool,
}

impl Book {
    fn new(title: &str, author: &str, isbn: &str) -> Book {
        Book {
            title: title.to_string(),
            author: author.to_string(),
            isbn: isbn.to_string(),
            is_issued: false,
        }
    }

    fn issue_book(&mut self) -> Book {
        self.is_issued = true;
        // Clone the book to back it up
        self.clone()
    }
}

fn main() {
    let mut book = Book::new("Rust Programming", "Steve Smith", "123-456-789");

    // Backup of the issued book
    let issued_book = book.issue_book();

    println!("{:?}", issued_book); // The book has been issued and backed up

    // Uncommenting the line below would cause an error because the book's ownership is moved
    // println!("{:?}", book); // This would give a compile-time error!
}

